[{"title":"ComputerNetwork","date":"2021-01-05T09:07:10.000Z","url":"/2021/01/05/ComputerNetwork/","categories":[[" ",""]],"content":"[TOC] 3数据链路层两台相邻机器（用信道连接，从而比特传递顺序和发送顺序一致）可靠有效的完整信息块（帧）通信，而物理层只关注单个比特。 3.1数据链路层的设计问题数据层使用物理层提供的服务在通信信道上发送和接受比特，完成的功能包括： （1）向网络层提供一个定义良好的服务接口 （2）处理传输错误 （3）调节数据流，确保慢速的接收方不会被快速的发送方淹没 应当注意的是，差错控制和流量控制在上层中也会出现，因为可靠性是网络的总目标，链路层只要做一点就足够好。 3.1.1提供给网络层的服务（1）无确认的无连接服务 事先不需要建立逻辑连接，目标机器不对帧进行确认，帧丢失后数据链路层不进行检测和恢复。适合于差错率极低或实时通信。 （2）有确认的无连接服务 帧需要单独确认，如果一个帧在指定时间没有到达目的地，发送方会重发帧。适用于错误率高的，如无线信道，例如802.11（Wi-Fi）。 （3）有确认的有连接服务 事先建立连接，每个帧都编号，确保发出的帧都被接收到而且只接收一次，并且所有帧按正确顺序接收，即提供了可靠的比特流。适合于长距离不可靠链路，如卫星和长途电话。 若采用有确认的无连接服务，那么确认帧丢失将导致帧被收发多次，而无线信道是很宝贵的。 3.1.2成帧拆分比特流应使得接收方很容易发现帧的开始： （1）字节计数法 头部字段标示帧的长度，但因为一个错误接收方就失去同步，而且接收方不知道跳过多少字节才能到达重传开始处，重传也无济于事。 （2）字节填充的标志字节法 用特殊的字节作为开始和结束，称为标志字节，两个连续的字节代表了一帧的结束和下一帧的开始，如果失去同步则再搜索两个标志字节（一个为当前帧的结束，一个为下一帧的开始），恢复同步。 但标志字节可能出现在数据中，可以在数据中出现的标志字节前加转义字节区分，若转义字节也出现在数据中，同样添加转义字节。在接收方的链路层删除即可。 （3）比特填充的标志字节法 开始和结束用一个特殊的比特模式01111110，同字节填充，只是确保了转换的最小密度，数据中出现标志模式时，连续出现5个1时添1个0。失去同步时，扫描标志序列。 （4）物理层编码违禁法 利用物理层冗余（不会使用到的）信号来标志帧的边界，即“编码违法”，无须填充。 3.1.3差错控制确保所有帧被被传递给目标机器网络层，并且保持正确的顺序，而且只接收一次。 常用方法是接收方发回特殊的控制帧，对它收到的帧进行肯定或否定（否定意味着需要重传）；但也可能等不到控制帧（控制帧丢失了或发出去的帧根本没到达接收方就丢失了，接收方无响应），需要引入计时器；但如果确实收到了，但确认帧丢失了，会重发一样的帧，这就需要将帧编号，否则就重复了。 3.1.4流量控制当发送方发送帧速度超过接收方接受帧的速度，则接收方无法以数据到来的速度处理持续到来的帧，此时必然丢弃一些帧。 两种方法：基于反馈的流量控制（接收方反馈，允许发送方发送更多数据，而在没有得到接收方许可前禁止发送帧）、基于速率的流量控制（利用协议的内置机制限制发送方速率）。 3.2差错检测和纠正两种策略： 纠错码： 海明码 二进制卷积码 里德所罗门码 低密度奇偶校验码 检错码： 奇偶 校验和 循环冗余校验（CRC ） 3.3基本数据链路层协议基本假设： 物理层、数据链路层、网络层是独立进程，它们通过来回传递消息通信 机器A与机器B采用可靠的、面向连接（有确认有连接）传输数据流 机器不会崩溃，即协议只处理通信错误 数据链路层收到数据包，在数据包前后增加数据链路层头（控制信息：种类、编号、确认）和尾（校验和），由此把数据包封装在帧中 3.3.1一个乌托邦式的单工协议不考虑任何出错的情况，近似于无确认无连接。 发送方：从网络层获取数据包、成帧、发送给物理层。 接收方：等待帧到达、从物理层取出帧、传递给网络层。 3.3.2无错信道上的单工（只是指数据是单方向）停-等协议流量控制：让接收方给发送方提供反馈信息，接收方将数据包传递给网络层之后给发送方返回一个小的哑帧（给发送方许可允许发送下一帧）。 发送方：从网络层获取数据包、成帧、发送给物理层、等待接收方的确认帧。 接收方：等待帧到达、从物理层取出帧、传递给网络层、发回确认帧。 3.3.3有错信道上的单工停-等协议增加一个计时器（防止帧丢失或确认帧丢失），等待接收方的确认，否则重发。（考虑A发给B，B收到正确帧了，但确认帧丢失了，B需要区分是否是重复的）因此需要对帧编号（0，1就够了，因为只需要区分当前帧和前一帧或后一帧，连续两帧之间的关系），使得接收方能够区分是否是重复帧。 自动重复请求（ARQ）或带有重传的肯定确认（PAR）：发送方在发送下一个帧之前必须得到肯定确认。 发送方：从网络层获取数据包、成帧、发送给物理层、启动计时器、等待事件（确认帧到达、关闭计时器、更换编号、发送下一帧，否则重传）。 接收方：等待帧到达、从物理层取出帧（确认是否是期待的帧，避免重复、若是期待帧，传递给网络层、发回确认帧、更改编号，否则发送一个确认编号相反的帧即重复确认帧），无论如何都要发送确认帧，这样收到重复帧时也能再次发送确认帧。 3.4滑动窗口协议（双向）双向信道借助于kind字段区分帧的种类（确认帧、数据帧）。 捎带确认：确认信息被附加在出境数据帧的ack字段上。但有一个问题：为了捎带一个确认帧，数据链路层要等待网络层传递给它数据包（这意味着可能让发送方计时器超时然后不必要的重传），因此需要等待一个固定时间若数据包没有到来，那么单独发送确认帧。 滑动窗口：在任何时刻发送方维持一组序号，分别对应于允许它发送的帧或者已经发送了但还没被确认的帧，称这些帧落在发送窗口，类似的接收方也维持着接收窗口。所有情况下都应发送确认帧，以便发送方知道如何处理。 由于帧可能丢失或损坏，所以链路层需要保存这些发送但没有确认的帧，同时还应在内存满时关闭网络层服务。 接收方的窗口若为1，则意味着链路层只能按顺序发送，而窗口&gt;1时，便可以不按顺序接收，这是链路层的事情，只要按顺序递交给网络层就可以了。（协议分层） 3.4.1 1位滑动窗口协议相当于停等式，但确认帧中还应包含接收到的帧的正确序号ack。 3.4.2 回退N协议前面的协议发送方发送下一帧之前必须等待确认，而这对于长发送时间来说会降低带宽利用率，若连续发送w个帧会有改善。w应该使得发送窗口填满之前确认帧到达，w=2BD+1，（B带宽、D延迟）。 链路利用率：$\\le\\frac{w}{2BD+1}$ 保持多个帧同时传输的技术是管道化，当传输的某个帧发生错误时。 回退N：接收方简单丢弃所有到达的后继帧，最终发送方超时，从受损帧开始按照顺序重发所有帧。 选择重传：接收方将收到的坏帧丢弃，但接收并缓存后面的所有好帧，当发送方超时（改进是发送否定确认NAK，包含了要重传的帧编号，这样不必超时就能重传），它只重传那个最未被确认的帧，这样接收方在收到正确的帧后，按照缓存顺序递交。累计确认：当n号帧的确认到达，n-1，n-2…会被自动确认。 计时器：多个帧，需要多个计时器。 3.4.3选择重传协议一个问题：接收方 向前移动窗口后，新的有效序号范围和老的有效序号范围重叠，后续的一批帧可能是重复的帧也可能是新帧。应确保接收方向前移动窗口之后，新老窗口没有重叠。 增加了辅助计时器：间隔应明显短于与数据帧关联的计时器间隔，尽早确认，即辅助计时器超时之前没有遇到一个反向流量，需要单独发送确认帧。 而且还应该避免重复申请重传。 3.5数据链路协议实例点到点协议（PPP）。 PPP3个特性： 一种成帧方法：毫无歧义的区分帧的结束和开始 一个链路控制协议：启动线路、测试线路、协商参数、当链路不在需要时温和关闭线路 一个协商网络层选项的方式 ATM（Asynchronous Transfer Mode）异步传输模式。 3.6总结链路层的任务：成帧、差错控制（纠错、检错、重传、编号）、流量控制。 信道利用率为一段时间内传输帧的时间比上所有时间（传输帧的时间+2倍延迟）。 4介质访问控制子层网络链路分为：点到点连接（第3章）和广播信道（本章）。 关键问题是：多方竞争信道的使用权时如何确定谁可以使用信道。用来确定下一个使用者的协议属于 链路层的一个子层，称为介质访问控制子层（Medium Access Control，MAC）。 广播信道又称为：多路访问信道或随机访问信道。 4.1信道分配问题4.1.1静态信道分配把信道容量拆分开分给多个用户使用（多路复用技术），如FDM、TDM等，分配为N份：如果用户数量超过 N，一些用户无法使用；如果用户数量少于N，则带宽浪费；如果用户数量基本维持在N，有些用户停止通信时带宽也被浪费了，流量突发：平均流量=1000:1，大多数时候大多数信道都是空闲的。 静态信道分配不能适应突发性流量。 4.1.2动态信道分配的假设 流量独立：模型由N个独立的站组成，帧的到达是独立的。 单信道：所有通信都用这一个信道，所有站能力相同。 冲突可观察：冲突（两帧同时传输，产生的信号是混乱的）。所有站都能检测冲突发生，冲突的帧必须在以后重发。有线信道上可以加、边发送边检测，从而提前停止发送帧，而无线信道要推迟到无法收到预期确认帧。 时间连续或分槽：在任何时候都可以传输帧；或分成离散的时间间隔。 载波侦听或不听：站在使用信道之前可以知道信道是否在被使用。有线网络通常具有载波侦听功能，而无线网络由于并不是每个站都在其他各站的广播范围，不能有效使用载波侦听。 4.2多路访问协议4.2.1ALOHA站在发送时不侦听信道。 纯ALOHA 用户有数据需要发送时就传输。发送方需要某种途径发现是否冲突，通常是站给中央计算机发送帧以后，该计算机把该帧重新广播给所有站，发送站可以侦听广播确定帧是否传输成功。 分槽ALOHA 时间分成离散的间隔（时间槽），站必须等待一个时间槽的开始时刻才能发送帧。 4.2.2载波侦听多路访问协议载波侦听协议：站监听是否存在载波（是否存在传输），并据此采取相应的动作。 坚持和非坚持CSMA（载波侦听） 1-坚持载波检测多路访问（CSMA，Carrier Sense Multiple Access）：一个站要发送数据时，它首先侦听信道，确定是否有其他站在传输数据，如果信道空闲 ，就发送数据；信道忙，就等待然后空闲时发送；若冲突（第一种情况是当一个站正在发送，其他两个站同时等待，而结束传输时，两个站就同时发送，这就导致了冲突。第二种情况是一个站发送 ，但另一站侦听时由于正在发送的信号延迟还没到达第二个站，同样也导致冲突，这称为信道带宽延迟）则等待一个随机时间然后重头开始上述过程。 p-坚持CSMA：适用于分时间槽，如果站检测到一个信道空闲，该站按照概率p发送数据，以1-p将此数据推迟到下一个时间槽，在一下个时间槽依然如此，直到数据发送出去；若繁忙，等到下一个时间槽；若冲突等待一个随机时间。 非坚持CSMA：在站监听到信道正在使用时，该站不持续对信道进行监听，以便传输结束后立即抓住机会发送数据，相反，它会等待一段随机时间然后重复上述算法。 带冲突检测的CSMA（冲突检测 ） 改进：每个站快速检测冲突后立即停止传输，因为帧已经成为乱码，可以节省时间和带宽。 带冲突检测的CSMA（CSMA/CD，CSMA with Collision Detection），一个站检测到冲突就立即终止传输，等待一个随机时间再次尝试发送。 冲突检测是一个模拟过程，站在传输时侦听信道，如果它读回的信号不同于它放到信道上的信号，则它知道发生了碰撞。接收信号不能比发射信号太微弱（而无线接收信号强度是发射信号的$\\frac{1}{1000000}$。 检测冲突的最小时间是两个相距最远的站传播信号所需要的时间$\\tau$的2倍即$2\\tau$，（一个来回）。 4.2.3无冲突协议位图协议 在每个竞争期，j号站要发送数据就忘j号槽传输1表明意愿，当所有N个槽都经过后，每个站都知道了哪些站希望传送数据，这时候便按照数字顺序开始传送数据了。 让每个站以预定义的顺序轮流发送帧。 预留协议：在实际传输数据之前先广播自己有发送数据愿望。 令牌传递 令牌同样以预定义顺序从一个站传送到另一个站，令牌代表发送权限，站在接收到令牌时，如果有等待传输的帧那么可以发送，如果没有就简单传送令牌。 二进制倒计数 若果一个站要使用信道，就以二进制位串的形式广播自己的地址，然后被信道布尔或，如果一个站看到自己的地址为为0的位置改成了了1，则必须放弃竞争。也就是高位的站优先级高。 4.2.4有限竞争协议将竞争协议和无冲突协议结合起来。 将所有站划分成组，只有0号组的成员才允许竞争0号槽，如果该组中一个成员竞争成功，则发送；如果改时间槽空闲或发生了冲突，那么1号组成员竞争1号时间槽，以此类推，减少了时间槽中的竞争数量。 协议的关键就是如何将站分配到各个时间槽中，在负载很低时，每个时间槽中的站点数多一些 ，反之少一些。 自适应树遍历协议 每一个槽都跟树中某些特定节点相关联，如果发生了冲突，则在该节点的左子女和右子女节点上递归搜索，如果一个槽是空闲的，或者槽只有一个站传送数据，则停止该节点的搜索。 4.2.5无线局域网协议无线通信系统通常不能检测正在发生的冲突，站接收到的信号可能很微弱，比发射信号弱上百万倍 。因此确认机制被用在事后发现冲突和其他错误。无线电的冲突发生在接收方。 相应的有隐藏终端问题和暴露终端问题。 无线电传输范围有限，一个站无法给所有其他站发送帧或接收来自所有站的帧，载波侦听不能很好实现。 有线信道，信号能够到达传播的全部站，因此可以载波侦听到，同时有线信道在同一时刻在系统中任何地方只能有一个站传输在进行。 而无线信道只能侦听站附近是否有活动发生，而对于接收方周围的活动无法完全知道，同时多个传输可以同时发生，只要它们目的地不同，并且这些目的地都不在彼此范围（如上图b中的A、D）。 冲突避免多路访问（MACA，Multiple Access with Collision Avoidance）：发送发刺激接收方输出一个短帧，以便其附近的站能检测到该次传输。从而避免在接下去进行的数据帧中也发送数据。（被用来替代载波侦听） RTS帧包含了将要发送的帧的长度，CTS也包含了数据长度（从RTS中复制），知道长度可以知道数据传输要多久。 4.3以太网802.3（以太网），802.11（无线局域网）。 第一类：经典以太网：利用上述协议解决多路访问。 第二类：交换式以太网：交换机。 4.3.1经典以太网物理层 4.3.2经典以太网MAC子层协议 前导码：确定帧的起始。 目的地址：第一位为0普通地址，第一位为1组播地址，全1为广播地址。 源地址：全球唯一性，48位，前3个字节标示站所在的组织唯一标识符（OUI，Organizationally Unique Identifier），指明网络设备制造商，后3个字节由网络设备商分配，并写入NIC（网络接口卡）。 最大帧长度限制：缓存帧的RAM当时很昂贵。 最小帧长度限制： 在发生冲突时，冲突帧虽然截断但已发出的部分还在信道上，为了更好区分有效帧和垃圾数据，要求有效帧必须至少64字节。 如果帧太短，则在帧到达另一端前该帧的传输就已经结束，而该帧很可能发生冲突，而在突发噪声回到发送方之前，真的传送已经结束，发送方得出发送成功的错误结论。因此，所有帧必须至少$2\\tau$时间完成发送。 二进制指数后退的CSMA/CA 确定冲突发生后等待的随机时间。 该算法成为二进制指数后退。 以太网不提供确认，即如果没有碰撞，发送方就假设该帧可能被成功传递了。 4.3.3以太网性能跳过。 4.3.4交换式以太网核心：交换机。 在集线器中，所有站都属于一个冲突域，它们必须使用CSMA/CD算法调度各自的传输。 交换机则是每个端口拥有自己的冲突域，通常电缆是全双工的，站和端口都可以同时在电缆上发送帧，没有冲突会产生，因而不需要CSMA/CD，而如果电缆半双工，则需要CSMA/CD竞争传输。 交换机性能： 没有冲突，容量使用更为有效。 交换机可以同时发送多个帧（有不同的站发出），这些帧到达交换机端口并输出到适当的端口。（如果去往同一个端口，则将输入帧缓冲）。 安全，帧只被转发到目的端口。 4.3.5快速以太网802.3u。 将比特时间从100纳秒降低到10纳秒，线缆降低为十分之一，以便及时检测冲突。 4.3.6千兆以太网载波扩充：在帧后面增加一些填充位。 帧突发：将多个发送帧级联在一起一次传输出去。 4.3.7万兆以太网以超高速率运行的物理层细节。 4.3.8以太网回顾以太网是无连接的。 4.4无线局域网802.11 短程无线电传输信号 2.4GHz，5GHz 4.4.1 802.11体系结构和协议栈 常见的无线产品标识为：802.11a/b/g 4.4.2 802.11物理层速率自适应：无线信号弱，采用较低速率；反之采用较高速率。 OFDM（在多径衰落中更好）、CDMA、MIMO（多入多出，提高吞吐量）。 4.4.3 802.11MAC子层协议无线电几乎总是半双工的（不能在一个频率上传输的同时侦听该频率的突发噪声），且接收到的信号比发射信号弱100万倍，冲突检测机制不能起作用。 采用CSMA/CA，在发送帧前侦听信道和检测到冲突后指数后退。同时需要发送的站必须以随机后退开始，利用确认来判断是否发生冲突，因为冲突无法被检测出来。 冲突避免非常重要，因为冲突代价昂贵。 利用确认来推断是否发生冲突，因为冲突无法被检测。 发送前的后退算法有利于减少冲突。 不同站的传输范围可能有所不同。同样有隐藏终端、暴露终端问题。 带有物理侦听和虚拟侦听的CSMA/CA是核心，但无助于暴露终端问题的解决。 一些改进： 可靠性：缩短帧，可以提高传输的可靠性，传输成功概率增大；降低传输速率，使用更可靠的编码技术。 电源：信标帧提醒客户端接受流量，然后开始传输 ；（自动省电交互）在客户端需要发送流量时才将缓存的入境帧发送给客户端。 服务质量：为不同帧定义不同的时间间隔，有了优先级；对于不同速率发送方都有一个传输时间，不会被慢速方拖累。 4.4.4 802.11帧结构控制帧、数据帧、管理帧。 持续时间字段通告本帧和确认帧将会占用信道多长时间。 4.4.5 服务关联：移动站把自己连接到AP。 重新关联：服务允许站改变它的首选AP。 认真：WPA2。 分法：决定如何路由帧。 数据传送：传输和接收数据。 4.5宽带无线最后一公里问题的一种解决方案WiMAX（全球微波接入互操作性）。 802.16 4.6蓝牙基本单元微网，包含一个主节点和至多7个从节点。 集中式的TDM系统，主节点控制时钟，并决定每个时间槽被哪个设备使用来通信。 4.7RFID跳过 4.8数据链路层交换把多个局域网连接起来组成更大的局域网：网桥（以太网交换机是网桥的现代名称，工作在链路层，通过检查数据链路层地址来转发帧）。 4.8.1网桥的使用两个独立的局域网有两倍于单个LAN的容量，因为是网桥不往不需要去的端口发送流量，也增加了可靠性。 后向学习算法：阻止不需要发送的流量。 生成树算法：防止形成环路。 4.8.2学习网桥所有附在网桥同一个端口的站都属于同一个冲突域，与其它端口的冲突域不同。 网桥接收隶属于每个端口的站发送的帧，决定是转发还是丢弃，并且决定在哪个端口传输帧，依据是帧的目标地址MAC。 这就需要一个大的哈希表，列出可能的目的地以及隶属的输出端口，网桥第一次接入时表是空的，使用泛洪算法（对于每个发向未知目标地址的入境帧网桥将它输出到所有端口，随着时间推移网桥会学习到每个目标地址在哪里），以后直接转发。成为后向学习算法。根据帧到达的源地址确定的。 因此只要看到MAC地址就可以转发，此时其它帧还在输入，即在接收一个帧以前就开始了转发 ，降低了网桥的延迟以及网桥必须能缓冲的帧数，称为直通式交换或虫孔路由。 4.8.3生成树网桥 让网桥之间互相进行通信，然后用一棵可以到达每个网桥的生成树覆盖实际的拓扑结构，消除回路。 4.8.4中继器/集线器/网桥/交换机/路由器和网关 用户生成某些数据，然后将数据发送给一台远程机器，这些数据被传递到传输层，传输层会加上一个头（如TCP头），然后将结果单元传递给网络层，网络层也会加上一个头，形成网络层数据包，然后传递给数据链路层，链路层加上它自己的头和校验和，并将结果帧交给物理层传送出去。 中继器在物理层，主要用来处理自己所连线缆上出现的信号，如放大，然后再放到另一个线缆上。中继器不理解帧，只知道把比特编码成电压信号。 集线器在物理层，有许多输入线路，从任何一条线路到达的帧都被发送到所有其它的线路上。如果两帧同时到达，会冲突。由于也是物理层，因此对上层数据不理解。 交换机（网桥）在数据链路层，与集线器不同的是网桥的每个端口被隔离成不同的冲突域，如果端口是全双工的点到点线路，则需要用到CSMA/CD。到达一帧时，网桥提取帧的目的MAC地址，并只转发到相应的端口。网桥被用来连接同一种网络类型。 路由器在网络层，当一个帧被到达路由器时，帧头、帧尾被剥掉，有效载荷被传递给路由器软件，然后利用数据包的头信息选择传输线路，如IP地址。路由器被用来连接不同种网络类型。 传输网关在传输层，将使用了不同面向连接协议的计算机连接起来，传输网关将数据包从一个连接复制到另一个连接，并且根据需要对数据包重新进行格式化。 应用网关在应用层，能够理解数据的格式和内容，并可以从一种格式转换为另一种格式。如将邮件转位SMS消息。 4.8.5虚拟局域网（VLAN）将逻辑拓扑结构和物理拓扑结构分离开来。 原因： 1.隔离，网络完全 2.有的LAN负载可能很重 3.广播流量（网桥最开始是泛洪，广播），消耗大。也可能产生广播风暴。 VLAN基于VLAN感知交换机，建立配置表指明通过哪些端口可以访问哪些VLAN。 网桥会转发到来自发送端口的同样标有对应VLAN标号的端口，而其他端口不会转发。 IEEE802.1Q 当一个标记帧到达VLAN感知交换机，该交换机利用VLAN标识符作为索引，查找帧要去的端口，同样利用泛洪算法算法来学习VLAN标记。 4.9本章总结在只有一个可用信道的网络 ，关键在于如何分配信道，当站的数目较小并成连续形时，FDM和TDM简单有效；当站变多或流量冲突发时，就要用到： ALOHA信道一空闲就发送 载波侦听的CSMA 还有消除竞争的位图、环以及二进制倒计数等。 树遍历协议能够减小竞争（二叉遍历），动态划分成两个大小不同的相邻组，并且同时允许同一个组内站竞争，最理想的组选择是当它允许发送时只有一个站要发送。 而无线局域网很难侦听冲突，而且站覆盖范围有限，使用了CSMA/CA，留有很小的后退时间避免冲突，使用RTS/CTS来对抗隐藏终端问题。 以太网是有线局域网的主要形式，使用CSMA/CD来分配信道，再加上交换机，链路的竞争得以缓解。 交换机使用了后向学习算法（泛洪算法）和生成树算法，VLAN技术使得物理拓扑结构可划分为不同的逻辑拓扑结构。 5网络层网络层关注如何将源端数据包一路送到接收方，沿途需要经过许多跳；而链路层只是从线路一边到另一边，因此网络层是处理端到端传输的最底层。 为此，网络层需要知道网络拓扑结构（所有链路和路由器的集合），并选择出适当的路径；还必须仔细选择路由器，避免某些路由器和线路负载过重。 5.1网络层的设计问题5.1.1存储转发数据包交换 数据包到达路由器后，被存储在路由器上，然后沿着路径转发到下一个路由器，直至到达目标主机，这称为存储-转发数据包交换。 5.1.2提供给传输层的服务 向上提供的服务应该独立于路由器技术 应该向传输层屏蔽路由器的数量、类型和拓扑关系 传输层可用的网络地址应该有一个统一编址方案，甚至可以跨越LAN和WAN 网络层提供的服务两种观点： 面向无连接的，路由器仅仅是传送数据包，错误控制和流量控制由主机完成，所有数据包独立于前面的数据包发送 可靠的、面向连接的，如帧中继 5.1.3无连接服务的实现面向无连接的，所有数据包被独立注入网络，每个数据包独立路由，这称为数据报，称为数据报网络。 而面向连接的，需要建立一条从源路由到目的路由的虚电路，称为虚电路网络。 包到达路由器存储起来，然后重新成帧发送发出去（下一跳）。 5.1.4面向连接服务的实现虚电路，当建立一个连接时从源到目的机器的一条路径被确定下来，保存在中间路由器的表中，所有需要通过这个连接的流量都使用这条路径。每个数据包都含有标识符指明它属于哪个虚电路。 这个过程称为标签交换，如多协议标签交换（MPLS，MultiProtocol Label Switching）。 发生标识符冲突时，A很容易区分然后替换标识符。 5.1.5虚电路和数据报网络的比较 5.2路由算法路由算法：确定一个数据包应该被发送到哪条线路。 路由：对使用哪条路径做出决策。 转发：是一个数据包到达时候做什么动作。 路由算法必须满足的特性：正确性、简单性、鲁棒性（处理拓扑结构和流量方面的变化）、稳定性（迅速收敛）、公平性、有效性。 路由算法分为：非自适应算法、自适应算法。 非自适应算法不会根据当前流量或拓扑结构来调整路由器决策（静态路由）。 自适应算法会改变路由决策以反应出拓扑结构的变化或流量变化等。 5.2.1优化原则最优化原则：如果路由器J在从路由器I到路由器K的最优化路径上，那么从J到K的最优路径也必定遵循同样的路由。 汇集树：从所有源到一个指定目标的最优路径的集合，构成一棵以目标节点为根的树。所有路由算法的目标是为所有路由器找到这样的汇集树，并根据汇集树来转发数据包。 5.2.2最短路径算法Dijkstra算法：找出从源节点到全部目标节点的最短路径。 当然这里的路径权值其一必须非负，其二有很多的度量方法。 5.2.3泛洪算法在实现路由算法时，路由器必须根据本地知识而不是网络的全貌做决策，一个简单的技术就是泛洪，将每一个入境数据包发送到除了该数据包到达的那条线路以外的每条出境线路。 但也要抑制泛洪，否则有大量数据包产生，可以增加跳计数器TTL，-1，为0丢弃。另一种技术是，路由器跟踪已经泛洪过的数据包，从而避免二次发送，即序号（标识符），同时增加一个计数器k避免序号表无限膨胀，它表示直到k的所有序号都已经观察到了，这还节省了序号表，k即是当前情况的概括。 主要用于广播等。 5.2.3距离矢量算法动态路由算法包括：距离矢量算法和链路状态路由算法。 距离矢量算法（Distance Vector Routing）：每个路由器维护一张表，表中列出了当前已知的每个目标的最佳距离，以及所用的链路 ，这些表通过邻居间相互交换信息而不断被更新，最终每个路由器都了解到达每个目的地的最佳链路。 无穷计算问题 真个网络最佳路径的寻找过程称为收敛。 距离矢量算法对于好消息反应迅速，对于坏消息反应异常迟缓。 一个解决方案是防止路由器向邻居返回一个从该邻居获得的最佳路径，称为带有染毒逆向的水平分裂法。 5.2.5链路状态路由距离矢量算法需要太长时间才能收敛到稳定状态，因此被一个全新算法替代，即链路状态路由算法（Link State Routing）。链路状态路由算法的延伸OSPF。 链路状态路由算法步骤： 发现邻居 在每一条点对点线路发送hello数据包，线路另一端的路由器返回应答说明自己是谁（全局唯一）。 设置链路成本 设置权值为了后续寻找最短路径。 构造链路状态包 收集到所需要的交换信息后，每个路由球构造一个包含所有信息的数据包，包含序号、年龄、邻居列表（邻居、成本）。 分发链路状态包 所有路由器必须快速并可靠地获得全部的链路状态数据包，否则各自构造的拓扑结构可能不一致。 分发使用泛洪，为了控制泛洪，每个数据包包含一个序号，其随着新数据包发出而递增。当数据包到达时，比较序列号，若小于收到的最大序列号，被认为重复的，丢弃，否则转发到除了出境线路以外的所有其他线路上。 因此还需要加上年龄字段，每秒钟-1，到0丢弃。 为了防止产生错误丢包和错包，所有的链路状态包都要被确认。 计算新路由 路由积累了全部的链路状态包后就可以构造出完整网络图。 链路状态路由没有慢收敛问题，很好！ 5.2.6层次路由路由表会变多，需要分层。 5.2.7广播路由同时给全部目标地址发送一个数据包称为广播。 逆向路径转发 还有一种完全沿着生成树（如汇集树）的转发，将会更优。 5.2.8 组播路由给一个组发送消息称为组播。 修剪生成树（汇集树）是一个不错的想法。 另一种是核心生成树。 5.2.9选播路由选播：将数据包发送给最近的一个组成员。 5.2.10移动路由主机 5.2.11自组织网络自组织网络（Ad hoc）：网络中的节点彼此靠近，同时承担路由器和主机双重任务。 按需距离矢量（AODV）算法：到达某个目的地的路由是按需发现的。 5.3拥塞控制算法拥塞：一部分网络中存在太多数据包导致数据包被延迟和丢失，从而降低了传输性能。 拥塞崩溃：随着注入负载的增加到超出网络的容量，网络性能骤降。 网络层和传输层共同承担拥塞的责任，网络层直接经历着拥塞，而且最终由它确定如何处理过载的数据包；然而拥塞控制最有效的方法是减少传输层注入网络的负载。 拥塞控制和流量控制的区别：拥塞控制是确保网络能承载所有到达的流量，流量控制只与特定接收方之间的点到点流量有关。 5.3.1拥塞控制的途径 拥塞出现意味着负载大于资源可以处理的能力，很自然会有减少负载或增加资源。 网络供给：建立一个与流量匹配的良好网络，动态增加网络资源如路由器等。 流量感知路由：根据流量使用情况量身定制路由，避开频繁使用的路径。 准入控制：如果新的连接会使网络拥挤不堪，那么久拒绝连接（减少负载）。 流量限制：路由向源端反馈要求抑制流量。 负载脱落：当一切努力失败，网络不得不丢弃无法传递的数据包。 5.3.2流量感知路由前面的链路状态路由算法中采用的是固定权重，能够适应拓扑结构的变化，但不能适应负载的变化，在计算路由时应该考虑负载将热点地区流量转移出去，最直接的就是把链路权重设置成与负载有关的函数，使得避开流量重的地区。 5.3.3准入控制只是应用于有连接的网络，如虚电路，除非网络能够携带额外流量而不会变得拥塞，否则不再建立连接。还可以和流量感知路由结合起来，以建立一条好的虚电路。 描述流量的方式：漏桶或令牌桶，有两个参数约束平均速率和突发流量的大小。见5.3.4。 5.3.4流量调节（控制）当拥塞迫在眉睫，必须告诉发送方紧急刹车放慢传输速度。 路由器确定如何接近拥塞：使用在路由器内缓冲的排队数据包，当超过某个阀值时，就代表开始拥塞了。 路由器必须及时把反馈信息反馈给发送方。 抑制包：给源主机返回一个抑制包。 显式拥塞通知：路由器在转发的数据包上打标记，表明它正在经历拥塞，接收方可以注意到拥塞发生，在它回复包时顺便告知发送方。（ECN，Explict Congestion notification） 逐跳后压：让抑制包在沿途的每一条都发挥作用。 5.3.5负载脱落所有方法都失败时，路由器亮出杀手锏——负载脱落。当路由器来不及处理数据包而即将被数据包淹没时，就将它们丢弃。 也有另外一种随机早期检测：即在缓冲区快满以前就丢弃数据包，这样发送方在检测到丢包后意识到网络拥塞，放慢速度，这是隐式通知。 5.4服务质量Qos服务质量机制让一个小容量网络以较低成本来满足应用需求。 5.4.1 应用需求流：从源到接收方的数据包流称为流。 每个流的需求有：带宽、延迟、抖动、丢失。抖动是延迟的变化或数据包到达时间的变化。 5.4.2流量整形突发流量可以填充满缓冲区并导致数据包丢失。 流量整形：调节进入网络的数据流的平均速率和突发性。 流量监管：对一个流进行监测。 漏桶和令牌桶 漏桶和令牌桶限制了流的长期速率，但允许其短期内突发某个最高调节长度，不会改变延迟。大量的突发数据被平滑处理，以便减少流量拥塞。 5.4.3包调度在同一个流的数据包之间以及在竞争流之间分配路由器资源的算法称为包调度算法，确定下一次缓冲区哪些数据包被发送。 路由器资源包括：带宽、缓冲区、CPU周期 。 公平队列： 加权公平队列 5.4.4准入控制用户向网络提出Qos请求，如果网络根据自身容量以及其它承诺作出决定是否接受或拒绝流，如果接受，则要提前在路由器上预留容量保证服务。 5.4.5综合服务资源预留协议：预留资源。 综合 5.4.6区分服务基于类别的服务 ，用户数据包被标上属于哪类服务。 加速转发：如voip需要的服务。 确保转发： 5.5网络互联两个或多个网络连接形成的网络互联。异质性。 5.5.1网络如何不同 5.5.2何以连接网络 IP提供了一种通用的数据包格式，所有路由器都认识这种数据包，所以路由器用来连接不同网络。 总的通过IP层来标识地址，路由器完成重新成帧，以及包的分段等。 交换和路由的本质区别：在路由器中，数据包被从帧中提取出来，数据包中的网络地址被用来决定把它转发到哪里去；而交换机上，整个帧是根据MAC地址传送的，交换机不必真正了解正在被交换的数据包所采用的网络层协议，同样路由器也不用了解交换机采用的链路层协议。 5.5.3隧道 将一个IPv6的数据包放到一个IPv4的数据包中。 5.5.4互联网路由在每个网络中使用内部网关协议，这个内部网络独立于其它网络运营，称为自治系统。而为了让数据包跨越构成互联网的网路，就需要用到外部网关协议。 5.5.5数据包分段MTU路径最大传输单元 以太网：1500字节。 802.11协议：2272字节。 IP：65535字节。 路径MTU发现： 5.6Internet的网络层期望异构性。 模块开发。 严格发送，宽容接收。 将整个网络粘合在一起的正是网络层协议，IP协议，IP提供的是尽力而为地把数据包从源端传送到接受方。 5.6.1IPv4协议 头：20字节定长+选项（最大40字节），最大60字节。IHL字段 区分服务：加速服务、确保服务、显式拥塞通知（ECN） 总长度：65535字节。 标识ID：确定一个新达到的分段是否属于同一个数据包，避免泛洪。 IP包中有一位是空出来的。 DF：不要分段。对路由器的命令 MF：更多的段。 分段偏移量：便于重组，必须是8字节的倍数（除了最后一段）。其他段的长度必须是8字节的倍数 TTL（生存期单位是跳）：在每个路由器上-1，减到0丢弃 ，避免数据包永远逗留在网络中。 协议：指明该递交给哪个进程，TCP或UDP或其它，协议编号唯一。 头部校验和：只校验自己的头部。在每一跳必须重新计算，因为TTL会改变。使用16位求和取反，到达数据包结果应为0。 源地址、目标地址：32位。 选项： 5.6.2IP地址IP地址并不指向一台主机，而是指向一个网络接口，如果一台主机在两个网络上，必须有两个IP地址，如路由器。 前缀 IP地址有层次性，由高位的可变长网络和低位的主机两部分组成，网络对应于一块连续的IP地址空间。 书写格式：网络地址/网络部分位数，如128.208.0.0/24，还有一种子网掩码subnet mask，进行&amp;操作 前缀可以使得路由器仅仅根据地址的网络部分转发数据包，大大降低路由表数量。 子网 在内部将一个网络块分成多个部分供内部网络使用，但对外部世界来说仍然是一个网络，这叫做子网划分。 只需要更新校园网内部路由器的所有子网掩码即可，对外部没有任何变化。 CIDR——无类域间路由 解决路由爆表。 与子网划分相反，可以将许多个小前缀合并成一个大前缀的地址块，由此产生的较大前缀地址称为超网，这个过程称为路由聚合 。 前缀允许重叠的情况下，按照最长匹配前缀。 发往旧金山的流量被发往（一个更具体的前缀）旧金山，而其它大前缀的流量发往伦敦。 分类和特殊寻址 特殊地址： 0.0.0.0主机在启动时使用，允许主机在不知道自己的网络号时访问自己所在的网络。 255.255.255.255用来标识制定网络中所有主机，允许在本地网络上广播。 127.x.x.x回环测试 所以全1不能使用。 NAT网络地址转换 解决IP地址短缺。 为每个内部网络用户分配IP地址，用于内部路由，在离开本地网络时，执行地址转换，把内部IP转换成公共IP。 使用了 IP地址的3个范围，任何网络都可以在内部使用，但不允许出现在公网上。 NAT在数据包数据包发出时建立源端口（基于该值的索引，因为可能两台机器使用相同端口，但本地路由器能够区分）和内部IP地址的联系。在数据包返回时查找本地IP地址。 NAT只允许内部客户首先建立连接 ，反之不可以 NAT允许多个设备共用同一个IP地址 NAT实际上转变为面向连接的特有形式，因为有表维护连接 NAT违反了协议分层原则，IP层数据包使用了传输层的端口信息 如果不使用TCP或UDP那么NAT失效 IPv6协议 128位地址。 与 IPv4不兼容。 多头部（扩展头）。 5.6.4Internet控制协议ICMP——Internet控制消息协议 ARP地址解析协议 IP地址映射到数据链路层的地址。 当目标IP不在本地网络上时，就发送给默认网关（路由器） 。同时路由器在不同网络上使用了不同的MAC地址。 可以使用ARP请求谁拥有自己的IP地址，从而完成让其它主机免费知晓自己的IP和MAC地址关系，免费ARP。 DHCP——动态主机配置协议 计算机在网络上广播请求一个IP地址，DHCP-DISCOVER包，到达DHCP服务器。收到请求分配IP地址，DHCP-OFFER，在这时服务器用主机MAC地址来标识主机。 IP地址有使用时间，需要续订。 5.6.5标签交换和MPLS多协议标签交换MPLS，在数据包前增加标签用于索引快速在内部表中找出出境线路，提高了转发速度。 在IP数据包前加上一个MPLS头。 介于网络层和链路层之间，是个单独的数据包 5.6.6OSPF——内部网关协议RIP（路由信息协议，距离矢量协议） OSPF开放最短路径优先（链路状态路由协议） OSPF： 负载均衡（分发到多条线路 ） 支持层次化系统（不要求路由器知道完整的拓扑结构） 计算最短路径，如果有多条，就记录下最短路径集合，然后便于转发期间把流量分摊到这些路径上。 OSPF可以把自治域（AS）划分成有编号的区域（Area），每个区域是一个网络，区域拓扑结构对外部不可见。 5.6.7BGP——外部网关路由协议需要考虑政治因素、商业因素等。 5.6.8Internet组播 5.6.7移动 IP家乡代理转发给移动主机。 5.7总结网络层向传输层提供的服务： 可以基于虚电路，遵循一条路径 可以基于数据报，独立路由 路由算法： 距离矢量算法 链路状态算法 拥塞控制： 网络供给—&gt;流量感知—&gt;准入控制—&gt;流量控制—&gt;负载脱落 服务质量Qos： 吞吐量 、延迟、抖动、丢失 方法： 流量整形（是在主机完成、令牌桶 、漏桶）、（路由器）资源预留、（路由器）准入控制 以及综合服务 、区分服务等 网络互联： MTU 隧道要求源和目的网络是一样的 网络层协议： ARP、ICMP、DHCP、MPLS（面向连接） OSPF（内部网关协议）、BGP（外部网关协议） 6传输层传输层与网络层是网络协议层次核心。网络层使用数据报或虚电路为端到端提供数据包交付服务；传输层把数据传递服务从两台计算机扩展到两台计算机上的进程之间。 提供可靠性服务独立于物理网络，传输层为应用层使用网络提供了抽象的模式。 6.1传输服务6.1提供给上层的服务传输层目标：提供高效、可靠、成本有效的数据传输服务 。完成这项工作的软/硬件称为传输实体。 传输层提供的服务类型： 面向连接的传输服务：连接建立、数据传输、连接释放。 无连接的传输服务 服务与网络层的两种类型相似。 两层的区别： 网络层的代码都运行在运营商的路由器上，用户对网络层没有控制权，所以不能在这里解决丢包、服务差等问题。 传输层的代码完全运行在用户机器上，因此可以用来提高服务质量，使得网络服务更加可靠；而且传输层把上层与技术 、设计和各种缺陷隔离，使得程序员可以按照一组标准的原语来编写代码，并且程序可以运行在不同的网络上。 因此可以看成1-4层是传输服务的提供者，上面的是传输服务的用户。 6.1.2传输服务原语 网络服务按照实际网络提供的服务来建立模型，一般是不可靠的，如IPv4的尽力而为。 而面向连接的传输服务是可靠的，即在不可靠的网络上提供可靠的服务，对用户来说这就好像是一个无错信道。同时也提供不可靠的数据报服务。 网络服务服务于传输实体，而传输层提供应用。 例子： 段：表示传输实体之间发送的信息。 在传输层发送的每个数据包都要被确认。 例子 ： 6.1.3Berkeley套接字（socket）套接字(Socket)**，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端**，提供了应用层进程利用网络协议交换数据的机制。 套接字提供了一种可靠字节流。 6.2传输协议要素传输服务由传输协议实现，与链路层一样，处理错误控制、顺序性、流量控制等。 链路层：点到点直接连接，本身就只有一端，即是建立连接的；链路层最多丢失，不会幽灵数据包；只用管理一个连接。 传输层：要指定目的地址，因为中间不是信道是网络，建立连接很复杂；传输层还要处理顺序等问题；要管理很多连接。 6.2.1寻址传输层：TSAP传输服务访问点，实例端口。 网络层：NSAP网络服务访问点，实例IP。 如何知晓目标TSAP：端口映射器（进程），用户向其查询，而新服务被创建时必须告知端口映射器其TSAP。 然后利用一种代理叫进程服务器代理很多服务，在连接后再具体匹配相应服务器。 6.2.2连接建立限制数据包的生存周期： 限制网络设计 在每个数据包中放一个跳计数器（实际采用） 为每个数据包打上时间戳 核心：源端用序号作为端的标签，使得该段在Ts内不被重用。 为了同步序号，引入三次握手 出现延迟的重复控制段时： 出现延迟的重复段和重复的确认段时： 主机2发现确认序号不对 ，知道是重复段。而重复请求的回复也会像上面一样得到主机1的reject。 6.2.3连接释放非对称释放：单方面切断。 对称释放：两个方向的连接释放单独释放，当主机发出disconnect请求后 ，仍然可以接受数据。 引入了计时器。 6.2.4差错控制和流量控制差错控制：确保数据传输具备所需的可靠性，通常指所有的数据均被无误地传送到目的地。 流量控制：防止快速 发送端淹没慢速接收端 。 链路层： 校验码（CRC或校验和等），确保信息被正确接收。 序号标识，在 收到接收方确认前重发，ARQ。 发送一定数量的帧，如果没有得到及时确认，需要暂停发送。允许发送一帧的时候为停等式，允许发送多个时使得发送管道化，提高长距离链路的性能。 滑动窗口就是以上的综合。 传输层： 发送方与接收方协商窗口大小，接收方反馈允许发送多少个段(流量控制），同时还有累计确认，重传。同时窗口大小还可以用来控制拥塞。 协商窗口时包可能会掉，所以定期发送控制段以解除死锁。 6.2.5多路复用多个会话共享连接（网络地址等）、虚电路和物理链路等。 分用、复用。 6.2.6崩溃恢复从第N层的崩溃中的恢复工作只能由第N+1层完成。 6.3拥塞控制传输实体以太快发送速度发送太多数据包，网络不堪重负，继而数据包被延迟和丢失。 拥塞控制是网络层和传输层的共同责任，拥塞发生在路由器上，即在网络层检测拥塞，然而拥塞终究是传输层注入网络流量引起的，所以拥塞控制唯一途径是传输层减缓网络中发送数据包的速度。 6.3.1理想的带宽分配效率和功率 最大-最小公平性：如果分配给一个流的带宽在不减少分配给另一个流的带宽的前提下无法得到进一步增长，那么就不给这个流更多带宽。 收敛 6.3.2调整发送速率流控、拥塞控制 反馈：显式拥塞通知ECN TCP实际采用滑动窗口机制来调整。 6.3.3无线问题传输协议通常把丢包作为拥塞发生的信号，而无线网络中 丢包几乎都是因为传输错误引起的。 使用重传机制解决，在向上层丢包之前先多次重传，因为链路层丢包时间尺度在微秒级别，而传输层丢包级别在毫秒级别，在传输层推测出丢包前，链路层已经检测出丢帧并重传。 6.4Internet传输协议：UDP无连接：UDP（仅仅是发送数据包） 面向连接：TCP（建立连接、重传增加可靠性、流控、拥塞控制等） 6.4.1UDP概述用户数据报协议（UDP），无连接。 8字节头和有效载荷组成。 有了端口字段，传输层能够递交给正确的应用程序（进程 ）处理。 最小长度8字节（头），最大长度65515字节，这是IP包长度限制的（65535-IP头20字节）。 校验和字段是可选的，校验头+数据+概念性的IP伪头。 IPv4伪头部： 违反了协议分层规则，IP属于网络层。 UDP没有流量控制、拥塞控制以及重传机制，所有这一切必须由用户完成，仅仅是复用和分用，以及可选的校验。 适用于客户及-服务器模型。如DNS（Domain Name System）。 6.4.2远程过程调用隐藏了过程调用的过程，允许本地程序调用远程主机上的过程。 UDP适用领域1:客户-服务器RPC。 6.4.3实时传输协议RTP（应用层上实现的传输协议）UDP适用领域2:实时多媒体应用 。 6.5Internet传输协议： TCP传输控制协议（TCP）在不可靠的网络上提供可靠的端到端字节流而专门设计的协议。 6.5.1TCP概述TCP负责流量控制、拥塞控制、差错控制（重传）、重新创配成正确的顺序。 6.5.2TCP服务模型TCP服务由发送端和接收端创建一种称为套接字的端点来获得。 套接字包含IP地址、端口号，为了获得TCP服务必须在一台机器和另一台机器的套接字之间建立一个连接。 "},{"title":"forward","date":"2020-12-31T16:00:00.000Z","url":"/2021/01/01/forward/","tags":[["memorial","/tags/memorial/"]],"categories":[[" ",""]],"content":"急匆匆從一個環境換到另一個環境，再次需要很久才能去適應新的環境，不過還好有了更確定的方向，以及在跌跌撞撞中有了更多的感悟，學習上總是喜歡去抓主幹從上往下看，然而生活不允許從下往上看，每個板塊都等待著去探索，去認識，它又是沒有方向的，似乎每個塊都是正確的方向，可每個人只能選擇一個方向，我們羨慕朋友圈別人的生活，別人的路，然而時不時也能從別人的話裡聽到類似的話語，這其實是對自己的不自信，總以為別人的更好，可為什麼自己的就不好呢，這是完全沒有道理的，千千萬萬的動植物每件都有其意義，每一種認真生活也同樣值得尊敬。認真生活我想是認真的做好選擇的事、認真的對待身邊的人，珍惜當下、妥協過去、期望未來。2020讓我又成長了許多，什麼是我，我需要去做什麼，我如何去體現自我的價值，我想這是我在2020獲得的最大禮物，儘管還是有很多迷茫與困惑，但那不就是生活的意義嗎。另一方面，這也讓我很困惑——感覺身邊的人都沒有這樣的想法，抑或是這是每個人的小秘密吧，比如我也未提及到底認識到了什麼，總之於個人而言我認為這是好的，並且它讓生活有了方向，一個跨越時間的目標，一個窮盡一生去領域去感受去認知的秘密。或許我在大家眼中是一個比較外向的人遼，哈哈哈或許應該是的吧，但其實我是慢熟、內向的，只是不得不去改變吧，改改也挺好的，有人誇我聽熱情的，只可惜只是外在改變了，內在核心未改變，在交友上還是會格外小心翼翼，還是會很敏感，害怕受到傷害，在這裏值得一提的是十年的老朋友——鄭（暫且就叫鄭吧），從孩童時候認識，斷斷續續十多年，竟然還在！很難有這種不需要維持，但需要一定在的朋友，自閉、欣喜、焦慮都能跟ta分享，也給了我很多的建議，不論是情感還是生活，有人說ta是開心果，總能把氣氛活躍起來，我想是的。當然在後來的時光裡也認識了許多朋友，我雖然記性不好但始終記得，期待時光的滌蕩你們還在。2020沒有匆匆過去，我有在認真生活，只是偶爾會迷失方向，偶爾會焦慮煩躁，但也偶爾會撞見生活善意的一面，2021也要繼續堅定的完成選擇的事，溫柔地對待每一個溫柔的人，更加認真地生活。往前看，小李！"},{"title":"test","date":"2020-11-24T04:46:31.000Z","url":"/2020/11/24/test/","categories":[[" ",""]],"content":"以下为引用测试： "}]